import lief
import os
import hashlib
import argparse
import pefile
import yara
import re
import subprocess
import sys

# Define some helper functions
def get_file_hashes(filepath):
    """
    Compute the MD5, SHA1, and SHA256 hashes of a file.
    """
    with open(filepath, "rb") as f:
        data = f.read()
        md5 = hashlib.md5(data).hexdigest()
        sha1 = hashlib.sha1(data).hexdigest()
        sha256 = hashlib.sha256(data).hexdigest()
        return md5, sha1, sha256

def extract_strings(filepath, min_length=4):
    """
    Extract ASCII strings from a file.
    """
    strings = []
    with open(filepath, "rb") as f:
        data = f.read()
        start = None
        for i in range(len(data)):
            if data[i] >= 0x20 and data[i] <= 0x7E:
                if start is None:
                    start = i
            elif start is not None:
                if i - start >= min_length:
                    strings.append(data[start:i].decode("ascii"))
                start = None
        if start is not None and len(data) - start >= min_length:
            strings.append(data[start:].decode("ascii"))
    return strings

def get_pe_data(pe):
    """
    Get some basic data about the PE file.
    """
    pe_data = {}
    pe_data['Machine'] = hex(pe.FILE_HEADER.Machine)
    pe_data['Number of Sections'] = pe.FILE_HEADER.NumberOfSections
    pe_data['Timestamp'] = hex(pe.FILE_HEADER.TimeDateStamp)
    pe_data['Entry Point'] = hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)
    pe_data['Image Base'] = hex(pe.OPTIONAL_HEADER.ImageBase)
    pe_data['Subsystem'] = hex(pe.OPTIONAL_HEADER.Subsystem)
    pe_data['DLL Characteristics'] = hex(pe.OPTIONAL_HEADER.DllCharacteristics)
    return pe_data

def get_imports(pe):
    """
    Get the list of imported DLLs and functions.
    """
    imports = {}
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        imports[entry.dll.decode('utf-8')] = []
        for imp in entry.imports:
            if imp.name is None:
                imports[entry.dll.decode('utf-8')].append(hex(imp.ordinal))
            else:
                imports[entry.dll.decode('utf-8')].append(imp.name.decode('utf-8'))
    return imports

def get_exports(pe):
    """
    Get the list of exported functions.
    """
    exports = []
    for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
        exports.append(exp.name.decode('utf-8'))
    return exports

def get_section_data(pe):
    """
    Get some basic data about the sections.
    """
    sections = {}
    for section in pe.sections:
        sections[section.Name.decode('utf-8')] = {}
        sections[section.Name.decode('utf-8')]['Virtual Address'] = hex(section.VirtualAddress)
        sections[section.Name.decode('utf-8')]['Virtual Size'] = section.Misc_VirtualSize
        sections[section.Name.decode('utf-8')]['Raw Size'] = section.SizeOfRawData
        sections[section.Name.decode('utf-8')]['Entropy'] = section.get_entropy()
    return sections

def get_section_data_lief(pe):
    """
    Get some basic data about the sections using LIEF.
    """
    sections = {}
    for section in pe.sections:
       sections[section.name] = {}
        sections[section.name]['Virtual Address'] = hex(section.virtual_address)
        sections[section.name]['Virtual Size'] = section.virtual_size
        sections[section.name]['Raw Size'] = section.size
        sections[section.name]['Entropy'] = section.entropy
    return sections

def scan_with_yara(filepath, rules):
    """
    Scan a file with a set of YARA rules.
    """
    matches = []
    for r in rules:
        rules_compiled = yara.compile(source=r)
        try:
            matches += rules_compiled.match(filepath)
        except Exception as e:
            print(f"Error while matching rule: {e}")
    return matches

def analyze_file(filepath):
    """
    Analyze a file and print out information about it.
    """
    try:
        # Use pefile to parse the file
        pe = pefile.PE(filepath)
    except Exception as e:
        print(f"Error while parsing file: {e}")
        return

    # Print out basic data about the file
    print(f"File: {filepath}")
    md5, sha1, sha256 = get_file_hashes(filepath)
    print(f"MD5 hash: {md5}")
    print(f"SHA1 hash: {sha1}")
    print(f"SHA256 hash: {sha256}")
    pe_data = get_pe_data(pe)
    for key, value in pe_data.items():
        print(f"{key}: {value}")

    # Print out imported functions
    imports = get_imports(pe)
    if len(imports) > 0:
        print("Imports:")
        for key, value in imports.items():
            print(f"{key}: {', '.join(value)}")

    # Print out exported functions
    exports = get_exports(pe)
    if len(exports) > 0:
        print("Exports:")
        print(", ".join(exports))

    # Print out section data
    section_data = get_section_data(pe)
    if len(section_data) > 0:
        print("Sections:")
        for key, value in section_data.items():
            print(f"{key}:")
            for subkey, subvalue in value.items():
                print(f"  {subkey}: {subvalue}")

    # Print out string data
    strings = extract_strings(filepath)
    if len(strings) > 0:
        print("Strings:")
        for s in strings:
            print(f"  {s}")

    # Scan the file with YARA rules
    yara_rules = [
        "rule potential_malware { \
            strings: \
                $a = { E8 ?? ?? ?? ?? 5E } \
                $b = { 6A ?? 68 ?? ?? ?? ?? 68 ?? ?? ?? ?? 8D ?? ?? ?? 50 } \
                $c = { FF 35 [4-8] 00 00 00 68 ?? ?? ?? ?? 8B ?? ?? ?? 85 } \
            condition: \
                any of them \
        }",
        "rule suspicious_strings { \
            strings: \
                $a = \"\\x25\\x20\\x64\\x20\\x25\" \
                $b = \"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\" \
            condition: \
                any of them \
        }"
    ]
    matches = scan_with_yara_matches = scan_with_yara(filepath, yara_rules)
    if len(yara_matches) > 0:
        print("YARA Matches:")
        for match in yara_matches:
            print(f"  Rule: {match.rule}, Tags: {match.tags}, Meta: {match.meta}, Strings: {match.strings}")

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Usage: python malware_analysis.py [file]")
    else:
        analyze_file(sys.argv[1])
